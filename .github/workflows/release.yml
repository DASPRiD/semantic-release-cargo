---
name: Release

env:
  APP_NAME: semantic-release-cargo
  CARGO_TERM_COLOR: always
  DEBUG: napi:*
  # MACOSX_DEPLOYMENT_TARGET: "10.13"
  RUST_BACKTRACE: 1

on:
  push:
    branches: [master, alpha, beta]

# Only allow one release workflow to execute at a time, since each release
# workflow uses shared resources (git tags, package registries)
concurrency:
  group: ${{ github.workflow }}

jobs:
  semantic-version:
    runs-on: ubuntu-latest
    outputs:
      next-version: ${{ steps.calculate.outputs.next-version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Fetch all history and tags for calculating next semantic version
          fetch-depth: 0

      - name: Configure Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: npm

      - name: Install npm dependencies
        run: npm ci --ignore-scripts

      - name: Calculate next semantic-release version
        id: calculate
        run: echo "next-version=$(npx standard-version --dry-run | grep "tagging release" | awk '{ print $NF }' | tr -d 'v')" >> $GITHUB_OUTPUT

  # Compile native CLI binary
  build-release:
    runs-on: ${{ matrix.triple.os }}
    container: ${{ matrix.triple.container }}
    needs:
      - semantic-version

    strategy:
      matrix:
        triple:
          - {
              os: "ubuntu-latest",
              target: "x86_64-unknown-linux-musl",
              cross: false,
            }
          - {
              os: "ubuntu-latest",
              target: "i686-unknown-linux-musl",
              cross: true,
            }
          - { os: "macOS-latest", target: "x86_64-apple-darwin", cross: false }
          # aarch64
          - {
              os: "ubuntu-latest",
              target: "aarch64-unknown-linux-musl",
              cross: true,
            }
          # macOS ARM
          - { os: "macOS-latest", target: "aarch64-apple-darwin", cross: true }

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install build inputs
        run: sudo apt install musl-tools
        if: runner.os == 'Linux'

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          target: ${{ matrix.triple.target }}

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # TODO: ERIC: bootstrap this with our own binary, to avoid long compilation times
      - name: Install set-cargo-version
        uses: actions-rs/cargo@v1
        if: steps.cache-cargo.outputs.cache-hit != 'true'
        with:
          command: install
          args: set-cargo-version --version 1.2.1

      - name: Prepare semantic-release for Rust
        run: set-cargo-version ./Cargo.toml ${{ needs.semantic-version.outputs.next-version }}

      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --bin semantic-release-cargo --no-default-features --target=${{ matrix.triple.target }} --release --verbose
          use-cross: ${{ matrix.triple.cross }}

      - name: Create release archive
        run: |
          mkdir dist
          mkdir -p builds/semantic-release-cargo-${{ matrix.triple.target }}
          cp target/${{ matrix.triple.target }}/release/semantic-release-cargo builds/semantic-release-cargo-${{ matrix.triple.target }}/
          tar -C builds -czvf dist/semantic-release-cargo-${{ matrix.triple.target }}.tar.gz semantic-release-cargo-${{ matrix.triple.target }}

      # Create a checksum of the tar archive for manual checksum verification of the archive before extraction.
      - name: Create tar checksum
        run: shasum --algorithm 256 semantic-release-cargo-${{ matrix.triple.target }}.tar.gz > semantic-release-cargo-${{ matrix.triple.target }}-SHASUMS256.txt
        working-directory: ./dist

      # Create a checksum of the binary for automatic checksum verification in the post-install hook. In this code
      # path, the tar archive is streamed from the GitHub release page and the stream is untarred before a file
      # is ever written to disk, to minimize disk usage. This makes it impossible to validate the checksum of the
      # entire tar archive, so we calculate a checksum of the untarred binary instead.
      - name: Create binary checksum
        run: shasum --algorithm 256 --binary semantic-release-cargo | tee ../../dist/semantic-release-cargo-${{ matrix.triple.target }}-binary-SHASUMS256.txt
        working-directory: ./builds/semantic-release-cargo-${{ matrix.triple.target }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.triple.target }}
          path: |
            dist/semantic-release-cargo-${{ matrix.triple.target }}.tar.gz
            dist/semantic-release-cargo-${{ matrix.triple.target }}-binary-SHASUMS256.txt
            dist/semantic-release-cargo-${{ matrix.triple.target }}-SHASUMS256.txt
          if-no-files-found: error
          retention-days: 1

  # Compile napi-rs native Node.js modules
  build-napi:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              ./node_modules/.bin/napi build --platform --release --strip --js false --target aarch64-apple-darwin --cargo-flags=--lib
              strip -x *.node
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              ./node_modules/.bin/napi build --platform --release --strip --js false --target x86_64-apple-darwin --cargo-flags=--lib
              strip -x *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              ./node_modules/.bin/napi build --platform --release --strip --js false --target x86_64-unknown-linux-gnu --cargo-flags=--lib &&
              strip *.node
    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: lts/*
          check-latest: true
          cache: npm

      - name: Install
        uses: actions-rs/toolchain@v1
        if: ${{ !matrix.settings.docker }}
        with:
          profile: minimal
          override: true
          toolchain: stable
          target: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-registry

      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.10.0

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      - name: Install dependencies
        run: npm install

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: --user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build
          run: ${{ matrix.settings.build }}

      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs:
      - build-napi
      - build-release
    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          check-latest: true
          cache: npm

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: .npm/cache
          key: npm-cache-ubuntu-latest-publish
          restore-keys: |
            npm-cache-

      - name: Install dependencies
        run: npm ci

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: ls artifacts
        run: ls -R ./artifacts

      - name: Prepare native artifacts
        run: |
          mkdir napi/
          mv artifacts/bindings-aarch64-apple-darwin/semantic-release-cargo.darwin-arm64.node napi/
          mv artifacts/bindings-x86_64-apple-darwin/semantic-release-cargo.darwin-x64.node napi/
          mv artifacts/bindings-x86_64-unknown-linux-gnu/semantic-release-cargo.linux-x64-gnu.node napi/

      - name: ls napi
        run: ls -R ./napi

      - name: Prepare GitHub Release artifacts
        run: |
          mkdir dist/
          mv artifacts/dist/* dist/

      - name: Combine checksums
        run: cat dist/**/semantic-release-cargo-*-SHASUMS256.txt | tee dist/SHASUMS256.txt

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release
