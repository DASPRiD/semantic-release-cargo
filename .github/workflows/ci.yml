---
name: CI

on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1

jobs:
  # Compile native CLI binary
  build-cli:
    name: Test CLI ${{ matrix.triple.target }}
    runs-on: ${{ matrix.triple.os }}
    container: ${{ matrix.triple.container }}

    strategy:
      matrix:
        triple:
          - {
              os: "ubuntu-latest",
              target: "x86_64-unknown-linux-musl",
              cross: false,
            }
          - {
              os: "ubuntu-latest",
              target: "i686-unknown-linux-musl",
              cross: true,
            }
          - { os: "macOS-latest", target: "x86_64-apple-darwin", cross: false }
          # aarch64
          - {
              os: "ubuntu-latest",
              target: "aarch64-unknown-linux-musl",
              cross: true,
            }
          # macOS ARM
          - { os: "macOS-latest", target: "aarch64-apple-darwin", cross: true }

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install build inputs
        run: sudo apt install musl-tools
        if: runner.os == 'Linux' && matrix.triple.cross == false

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: nightly
          target: ${{ matrix.triple.target }}

      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Cross-compile release binary
        if: matrix.triple.cross == true
        run: cross test

      - name: Compile release binary
        if: matrix.triple.cross == false
        run: cargo test

  # Compile napi-rs native Node.js library
  build-napi:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              ./node_modules/.bin/napi build --platform --release --js false --features napi-rs --cargo-flags=--lib --target aarch64-apple-darwin
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              ./node_modules/.bin/napi build --platform --release --js false --features napi-rs --cargo-flags=--lib --target x86_64-apple-darwin
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: |-
              set -e &&
              ./node_modules/.bin/napi build --platform --release --js false --features napi-rs --cargo-flags=--lib --target x86_64-unknown-linux-gnu

    name: Build Node-API ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          check-latest: true
          cache: npm

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: nightly
          target: ${{ matrix.triple.target }}

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache npm dependencies
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts

      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
